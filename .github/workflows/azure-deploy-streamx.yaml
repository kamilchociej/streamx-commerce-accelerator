name: 'Azure: Deploy StreamX'

on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: "Setup Terraform"
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.10.4"

      - name: "Terraform init"
        env:
          ARM_ACCESS_KEY:
            ${{ secrets.ARM_ACCESS_KEY }}
        run: terraform -chdir=./terraform/azure/platform init

      - name: "Terraform workspace setup"
        env:
          ARM_ACCESS_KEY:
            ${{ secrets.ARM_ACCESS_KEY }}
        run: |
          TF_WORKSPACE=$(bash .github/scripts/tf_workspace_name.sh '${{ github.ref_name }}')
          terraform -chdir=./terraform/azure/platform workspace select -or-create $TF_WORKSPACE

      - name: "Terraform apply"
        id: "terraform_apply"
        env:
          ARM_ACCESS_KEY:
            ${{ secrets.ARM_ACCESS_KEY }}
          ARM_CLIENT_ID:
            ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET:
            ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID:
            ${{ secrets.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID:
            ${{ secrets.ARM_SUBSCRIPTION_ID }}
          TF_VAR_cert_manager_lets_encrypt_issuer_acme_email:
            ${{ vars.TF_VAR_cert_manager_lets_encrypt_issuer_acme_email }}
          TF_VAR_streamx_operator_image_pull_secret_registry_email:
            ${{ vars.TF_VAR_streamx_operator_image_pull_secret_registry_email }}
          TF_VAR_streamx_operator_image_pull_secret_registry_password:
            ${{ secrets.TF_VAR_streamx_operator_image_pull_secret_registry_password }}
        run: |
          terraform -chdir=./terraform/azure/platform apply -auto-approve
          echo "kubeconfig_path=$(terraform -chdir=./terraform/azure/platform output -raw kubeconfig_path)" >> $GITHUB_OUTPUT
          echo "streamx_ingress_ip=$(terraform -chdir=./terraform/azure/platform output -raw loadbalancer_ip)" >> $GITHUB_OUTPUT
          

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Set up homebrew
        uses: 'Homebrew/actions/setup-homebrew@master'

      - name: Install StreamX via Homebrew
        run: |
          brew install streamx-dev/preview-tap/streamx

      - name: "Deploy mesh"
        env:
          KUBECONFIG: ${{ steps.terraform_apply.outputs.kubeconfig_path }}
          QUARKUS_PROFILE: GH_CD
        run: |
          echo '_GH_CD_STREAMX_INGESTION_HOST=ingestion.${{ steps.terraform_apply.outputs.streamx_ingress_ip }}.nip.io' >> .env
          echo '_GH_CD_WEB_HOST=puresight.${{ steps.terraform_apply.outputs.streamx_ingress_ip }}.nip.io' >> .env
          echo '_GH_CD_STREAMX_INGESTION_URL=http://ingestion.${{ steps.terraform_apply.outputs.streamx_ingress_ip }}.nip.io' >> .env
          echo '_GH_CD_STREAMX_INTERNAL_INGESTION_URL=http://ingestion.${{ steps.terraform_apply.outputs.streamx_ingress_ip }}.nip.io' >> .env
          echo '_GH_CD_WEB_URL=https://puresight.${{ steps.terraform_apply.outputs.streamx_ingress_ip }}.nip.io' >> .env
          streamx --accept-license deploy -f ./mesh/mesh.yaml

      - name: "Wait for StreamX Mesh to be ready"
        env:
          KUBECONFIG: ${{ steps.terraform_apply.outputs.kubeconfig_path }}
        run: .github/scripts/wait_for_mesh.sh

      - name: "Wait for Ingestion Service to be ready"
        env:
          KUBECONFIG: ${{ steps.terraform_apply.outputs.kubeconfig_path }}
        run: .github/scripts/wait_for_ingress.sh sx-ing-rest-ingestion

      - name: "Ingest content"
        env:
          KUBECONFIG: ${{ steps.terraform_apply.outputs.kubeconfig_path }}
          QUARKUS_PROFILE: GH_CD
        run: |
          echo "_GH_CD_STREAMX_TOKEN_INGESTION_AUTH_TOKEN_CMS=$(kubectl get secrets sx-sec-auth-jwt-cms -o jsonpath  -o jsonpath="{.data.jwt}" | base64 --decode)" >> .env
          echo "_GH_CD_STREAMX_TOKEN_INGESTION_AUTH_TOKEN_PIM=$(kubectl get secrets sx-sec-auth-jwt-pim -o jsonpath  -o jsonpath="{.data.jwt}" | base64 --decode)" >> .env
          ./data/scripts/publish-all.sh

      - name: "Create Job Summary"
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Deployment Status: Success âœ…" >> $GITHUB_STEP_SUMMARY
          echo "- Demo URL: https://puresight.${{ steps.terraform_apply.outputs.streamx_ingress_ip }}.nip.io" >> $GITHUB_STEP_SUMMARY
          echo "- Load balancer IP: ${{ steps.terraform_apply.outputs.streamx_ingress_ip }}" >> $GITHUB_STEP_SUMMARY
